<?xml version="1.0" encoding="UTF-8"?>
<tc:tc-config xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd" xmlns:tc="http://www.terracotta.org/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <servers>
    <!--Tell DSO where the Terracotta server can be found.-->
    <server host="localhost">
      <data>%(user.home)/terracotta/server-data</data>
      <logs>%(user.home)/terracotta/server-logs</logs>
      <!--statistics>%(user.home)/terracotta/statistics-%(tc.node-name)</statistics-->
      <!--<dso>
		<persistence>
			<mode>permanent-store</mode>
		</persistence>
	  </dso>-->
    </server>
  </servers>
  <!--Tell DSO where to put the generated client logs-->
  <clients>
    <logs>%(user.home)/terracotta/client-logs</logs>
  </clients>
  <application>
    <dso>
      <roots>
        <root>
          <field-name>com.jrock.Timer.timeRemaining</field-name>
        </root>
        <root>
          <field-name>com.jrock.HelloWorld.hellos</field-name>
        </root>
        <root>
          <field-name>com.jrock.HelloWorld.counter</field-name>
        </root>
        <!--<root>
	  		<field-name>com.jrock.Timer.lock</field-name>
	  	</root>
	  	<root>
	  		<field-name>com.jrock.Timer.init</field-name>
	  	</root>
	  	<root>
	  		<field-name>com.jrock.TimerDriver.timer</field-name>
	  	</root>-->
        <root>
          <field-name>com.jrock.HelloClusteredWorld.buffer</field-name>
        </root>
        <root>
          <field-name>com.jrock.HelloClusteredWorld.loopCounter</field-name>
        </root>
        <root>
          <field-name>com.jrock.Timer.init</field-name>
        </root>
      </roots>
      <!--Start by including all classes for instrumentation.
           It's more efficient to instrument only those classes that
           hold shared roots or are part of a shared root's graph.-->
      <instrumented-classes>
        <include>
          <!--class-expression>com.jrock.Timer</class-expression-->
          <class-expression>*..*</class-expression>
        </include>
      </instrumented-classes>
      <!--Apply write level autolocks for all instrumented methods.
           It's more efficient to create finer-grain locks as dictated
           by your application needs.-->
      <locks>
        <autolock>
          <lock-level>write</lock-level>
          <method-expression>* *..*.*(..)</method-expression>
        </autolock>
      </locks>
    </dso>
  </application>
</tc:tc-config>